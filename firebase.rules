rules_version = '2';

// Firestore rules
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
    
    // Posts collection
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        // Allow users to update their own posts
        resource.data.userId == request.auth.uid ||
        // Allow users to like/unlike posts
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) ||
        // Allow users to comment on posts
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments'])
      );
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
  }
}

// Storage rules
service firebase.storage {
  match /b/{bucket}/o {
    match /videos/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /images/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
} 